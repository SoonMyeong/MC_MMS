import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class ApacheHttpPostMSRAddSp {
	public static void main(String[] args) {
		String url = "http://localhost:8089/register-mrn";
	
		HttpClient client = HttpClientBuilder.create().build();
		HttpPost post = new HttpPost(url);

		// add header
		post.setHeader("User-Agent", "MMSClient/0.9.1");
		post.setHeader("Content-type", "application/json;charset:UTF-8;");
		//post.setHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		post.setHeader("srcMRN", "urn:mrn:smart-navi:msr:portal-msr2");
		post.setHeader("dstMRN", "urn:mrn:smart-navi:device:mms2");
		
		
		ObjectMapper mapper = new ObjectMapper();
		ObjectNode node = mapper.createObjectNode();

		node.put("rgtMRN","urn:mrn:smart-navi:device:svc-004");
		node.put("certificate
		
		String JSON_STRING = node.toString();
		post.setEntity(new StringEntity(JSON_STRING, ContentType.APPLICATION_JSON));
		
		HttpResponse response = null;
		try {
			response = client.execute(post);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Response Code : " + response.getStatusLine().getStatusCode());

		BufferedReader rd= null;
		try {
			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		} catch (IllegalStateException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		StringBuffer result = new StringBuffer();
		String line = "";
		try {
			while ((line = rd.readLine()) != null) {
				result.append(line);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println(result.toString());
		System.out.println(org.json.JSONObject.stringToValue(result.toString()));

		
	}
}
